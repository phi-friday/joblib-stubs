from multiprocessing.process import BaseProcess
from typing import Literal

__all__ = ["Popen"]

class _DupFd:
    fd: int
    def __init__(self, fd: int) -> None: ...
    def detach(self) -> int: ...

class Popen:
    method: Literal["loky"]
    DupFd: _DupFd
    returncode: int | None
    def __init__(self, process_obj: BaseProcess) -> None: ...
    def duplicate_for_child(self, fd: int) -> int: ...
    def poll(self, flag: int = ...) -> int | None: ...
    def wait(self, timeout: float | None = ...) -> int | None: ...
    def terminate(self) -> None: ...
    @staticmethod
    def thread_is_spawning() -> bool: ...
